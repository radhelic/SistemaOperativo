package sistemaoperativo;



import java.awt.Color;
import java.awt.Component;
import java.awt.Window;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author MajoCarmen
 */
public class PantallaProcesos extends javax.swing.JFrame {
    DefaultTableModel frameProcesos;

    /** Creates new form Tabla_Procesos */
    public PantallaProcesos() {
        initComponents();
        frameProcesos=new DefaultTableModel();
        frameProcesos.addColumn("Estado"); //Numero de proceso
        frameProcesos.addColumn("Proceso"); //Numero de p�gina
        frameProcesos.addColumn("Info relevante"); //Bit de residencia
        frameProcesos.addRow(new Object []{null, null, null});
        tablaProcesos.setModel(frameProcesos);
         Window[] w=PantallaProcesos.getWindows();
         w[1].setLocation(w[0].getWidth()+5, w[0].getY());

         TableColumn tcol;
         //va recrriendo las columnas
        for(int i=0;i<3;i++)
        {
            tcol= tablaProcesos.getColumnModel().getColumn(i);
            tcol.setCellRenderer(new CustomTableCellRenderer());
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSP1 = new javax.swing.JScrollPane();
        tablaProcesos = new javax.swing.JTable();
        jLbl1 = new javax.swing.JLabel();
        txt_solicitaInstruccion = new javax.swing.JLabel();
        txt_procesoEjecutandose = new javax.swing.JLabel();
        jLbl2 = new javax.swing.JLabel();
        txt_SigInstruc = new javax.swing.JLabel();
        jSP2 = new javax.swing.JScrollPane();
        lbl_texto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaProcesos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jSP1.setViewportView(tablaProcesos);

        jLbl1.setText("Instrucci�n ejecutada:");

        txt_solicitaInstruccion.setText("--");

        txt_procesoEjecutandose.setFont(new java.awt.Font("Tahoma", 1, 14));
        txt_procesoEjecutandose.setText("Proceso actual: X");

        jLbl2.setForeground(new java.awt.Color(153, 153, 153));
        jLbl2.setText("Siguiente instrucci�n:");

        txt_SigInstruc.setForeground(new java.awt.Color(153, 153, 153));
        txt_SigInstruc.setText("--");

        lbl_texto.setColumns(20);
        lbl_texto.setRows(5);
        jSP2.setViewportView(lbl_texto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(15, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLbl2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_SigInstruc))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLbl1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_solicitaInstruccion))
                            .addComponent(txt_procesoEjecutandose)
                            .addComponent(jSP1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jSP2, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_procesoEjecutandose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLbl1)
                    .addComponent(txt_solicitaInstruccion))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLbl2)
                    .addComponent(txt_SigInstruc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSP1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    
        public class CustomTableCellRenderer extends DefaultTableCellRenderer{
        @Override
        public Component getTableCellRendererComponent (JTable table,
          Object obj, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(
                             table, obj, isSelected, hasFocus, row, column);
            String estado=(String)table.getValueAt(row, 0);
            
            if (estado.equalsIgnoreCase("Running"))
            {
                cell.setBackground(Color.green);
            }
            if(estado.equalsIgnoreCase("Ready")){
                cell.setBackground(Color.yellow);
            }
            if(estado.equalsIgnoreCase("Blocked")){
                cell.setBackground(Color.red);
            }
            if(estado.equalsIgnoreCase("Finished")){
                cell.setBackground(Color.white);
            }

                
            
            return cell;
        }
    }
        
    public void llenaTablaProcesos(ArrayList procesos,String scheduleAlgorithm){
        int n=procesos.size();
        int i,j,nP;
        DisenoProceso pr=null;
        DisenoPagina pg;
        String dato="";
        String info="";
        String ex[]= new String [6];

        ex[0]="FIFO";
        ex[1]="Round Robin";
        ex[2]="Shortest Job First";
        ex[3]="Shortest Remaining Time";
        ex[4]="Highest Response Ratio Next";

            if(scheduleAlgorithm.equalsIgnoreCase("FIFO")){
                lbl_texto.setText(ex[0]);
            }if(scheduleAlgorithm.equalsIgnoreCase("RR")){
                lbl_texto.setText(ex[1]);
            }if(scheduleAlgorithm.equalsIgnoreCase("SJF")){
                lbl_texto.setText(ex[2]);
            }if(scheduleAlgorithm.equalsIgnoreCase("SRT")){
                lbl_texto.setText(ex[3]);
            }if(scheduleAlgorithm.equalsIgnoreCase("HRRN")){
                lbl_texto.setText(ex[4]);
            }

        while (tablaProcesos.getRowCount() > 0) {
            ((DefaultTableModel) tablaProcesos.getModel()).removeRow(0);}
        for(i=0;i<n;i++){
            for (j= 0; j < n; j++) {
                pr=(DisenoProceso) procesos.get(j);
                if(pr.idProceso==i+1)
                    break;
            }
            if(scheduleAlgorithm.equalsIgnoreCase("FIFO")){
                dato=String.valueOf(procesos.indexOf(pr));
            }if(scheduleAlgorithm.equalsIgnoreCase("RR")){
                dato=String.valueOf(procesos.indexOf(pr))+" Quantum: "+pr.quantumProceso;
            }if(scheduleAlgorithm.equalsIgnoreCase("SJF")){
                dato=String.valueOf(pr.instrXProceso);
            }if(scheduleAlgorithm.equalsIgnoreCase("SRT")){
                dato=String.valueOf((pr.instrXProceso)-(pr.acumInstrEjecutadas));
            }if(scheduleAlgorithm.equalsIgnoreCase("HRRN")){
                dato=String.valueOf(redondear((((double)(pr.tEspera+pr.instrXProceso))/((double)(pr.instrXProceso))),2));
                System.out.println("Proceso "+pr.idProceso+" Prioridad "+redondear((((double)(pr.tEspera+pr.instrXProceso))/((double)(pr.instrXProceso))),2));
            }
            if(pr.estadoProceso.equalsIgnoreCase("Running"))
                txt_procesoEjecutandose.setText("Proceso actual: "+String.valueOf(pr.idProceso));

            frameProcesos.addRow(new Object [] {pr.estadoProceso, pr.idProceso, dato});
        }
    }


    public void instruccionleida(String inst){
        txt_solicitaInstruccion.setText(inst);
    }

    public static void siguienteInstruccion(String inst){
        txt_SigInstruc.setText(inst);
    }

    public static double redondear(double Rval, int Rpl) {
        double p = (double)Math.pow(10,Rpl);
        Rval = Rval * p;
        double tmp = Math.round(Rval);
        return (double)tmp/p;
    }
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaProcesos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLbl1;
    private javax.swing.JLabel jLbl2;
    private javax.swing.JScrollPane jSP1;
    private javax.swing.JScrollPane jSP2;
    private javax.swing.JTextArea lbl_texto;
    private javax.swing.JTable tablaProcesos;
    private javax.swing.JLabel txt_solicitaInstruccion;
    private javax.swing.JLabel txt_procesoEjecutandose;
    private static javax.swing.JLabel txt_SigInstruc;
    // End of variables declaration//GEN-END:variables

}

